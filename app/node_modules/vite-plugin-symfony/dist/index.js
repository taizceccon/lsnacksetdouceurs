var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => symfony
});
module.exports = __toCommonJS(src_exports);

// node_modules/tsup/assets/cjs_shims.js
var getImportMetaUrl = () => typeof document === "undefined" ? new URL("file:" + __filename).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;
var importMetaUrl = /* @__PURE__ */ getImportMetaUrl();

// src/index.ts
var import_node_path4 = require("path");
var import_node_fs = require("fs");
var import_sirv = __toESM(require("sirv"));
var import_picocolors2 = __toESM(require("picocolors"));

// src/entryPointsHelper.ts
var import_process = require("process");
var import_path2 = require("path");

// src/utils.ts
var import_node_os = __toESM(require("os"));
var import_node_path = __toESM(require("path"));
var import_picocolors = __toESM(require("picocolors"));
var import_fs = require("fs");
var import_path = require("path");
var isWindows = import_node_os.default.platform() === "win32";
function slash(p) {
  return p.replace(/\\/g, "/");
}
function normalizePath(id) {
  return import_node_path.default.posix.normalize(isWindows ? slash(id) : id);
}
function getLegacyName(name) {
  const ext = import_node_path.default.extname(name);
  const endPos = ext.length !== 0 ? -ext.length : void 0;
  name = name.slice(0, endPos) + `-legacy` + ext;
  return name;
}
function isIpv6(address) {
  return address.family === "IPv6" || // In node >=18.0 <18.4 this was an integer value. This was changed in a minor version.
  // See: https://github.com/laravel/vite-plugin/issues/103
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore-next-line
  address.family === 6;
}
function logConfig(config, server, depth) {
  Object.entries(config).map(([key, value]) => {
    const prefix = " ".repeat(depth);
    const keySpaces = prefix + import_picocolors.default.dim(key) + " ".repeat(30 - key.length - prefix.length);
    if (typeof value === "undefined" || typeof value === "boolean" || typeof value === "number" || typeof value === "bigint") {
      server.config.logger.info(`${keySpaces}: ${value ? import_picocolors.default.green(value.toString()) : value}`);
    } else if (typeof value === "string") {
      server.config.logger.info(`${keySpaces}: ${value ? import_picocolors.default.green('"' + value.toString() + '"') : value}`);
    } else if (typeof value === "symbol") {
      server.config.logger.info(`${keySpaces}: symbol`);
    } else if (typeof value === "function") {
      server.config.logger.info(`${keySpaces}: function`);
    } else if (value === null) {
      server.config.logger.info(`${keySpaces}: null`);
    } else if (typeof value === "object") {
      server.config.logger.info(`${key}:`);
      logConfig(value, server, depth + 2);
    } else {
      server.config.logger.info(`${keySpaces}: unknown`);
    }
  });
}
var writeJson = (filePath, jsonData) => {
  try {
    (0, import_fs.writeFileSync)(filePath, JSON.stringify(jsonData, null, 2));
  } catch (err) {
    throw new Error(`Error writing entrypoints.json ${err.message}`);
  }
};
var emptyDir = (dir) => {
  const files = (0, import_fs.readdirSync)(dir);
  for (const file of files) {
    (0, import_fs.rmSync)((0, import_path.join)(dir, file), { recursive: true });
  }
};

// src/entryPointsHelper.ts
var import_node_path2 = __toESM(require("path"));
var entryPath2exportPath = {};
var getDevEntryPoints = (config, viteDevServerUrl) => {
  const entryPoints = {};
  for (const [entryName, { entryPath, entryType }] of Object.entries(prepareRollupInputs(config))) {
    entryPoints[entryName] = {
      [entryType]: [`${viteDevServerUrl}${config.base}${entryPath}`]
    };
  }
  return entryPoints;
};
var addBuildEntryPoints = (options, config, bundle, entryPoints) => {
  for (const chunkName in bundle) {
    entryPath2exportPath[getEntryPath(bundle[chunkName], options, config)] = chunkName;
  }
  const entryFiles = prepareRollupInputs(config);
  for (const [entryName, entry] of Object.entries(entryFiles)) {
    let exportPath = entryPath2exportPath[entry.entryPath];
    let fileInfos = bundle[exportPath];
    let isLegacy = false;
    if (!fileInfos) {
      const legacyEntryPath = getLegacyName(entry.entryPath);
      exportPath = entryPath2exportPath[legacyEntryPath];
      fileInfos = bundle[exportPath];
      if (!fileInfos) {
        continue;
      }
      isLegacy = true;
    }
    const defaultEntryName = isLegacy ? `${entryName}-legacy` : entryName;
    const legacyEntryName = typeof entryPoints[`${defaultEntryName}-legacy`] !== "undefined" ? `${defaultEntryName}-legacy` : false;
    entryPoints[defaultEntryName] = resolveEntrypoint(fileInfos, bundle, config, legacyEntryName, true);
  }
  if (entryPath2exportPath["vite/legacy-polyfills-legacy"]) {
    const fileInfos = bundle[entryPath2exportPath["vite/legacy-polyfills-legacy"]];
    if (fileInfos) {
      entryPoints["polyfills-legacy"] = resolveEntrypoint(fileInfos, bundle, config, false, true);
    }
  }
  return entryPoints;
};
var getEntryPath = (chunk, options, config) => {
  if (chunk.type === "asset") {
    return chunk.name;
  } else if (chunk.type === "chunk") {
    if (chunk.facadeModuleId) {
      let name = normalizePath(import_node_path2.default.relative(config.root, chunk.facadeModuleId));
      if (options.format === "system" && !chunk.name.includes("-legacy")) {
        name = getLegacyName(name);
      }
      return name.replace(/\0/g, "");
    } else {
      return chunk.fileName;
    }
  }
};
var resolveEntrypoint = (fileInfos, bundle, config, legacyEntryName, isCSSOrJsEntry) => {
  const js = [];
  const css = [];
  const preload = [];
  if (fileInfos.imports) {
    for (const importEntryName of fileInfos.imports) {
      const importFileInfos = bundle[importEntryName];
      if (!importFileInfos) {
        throw new Error(`Unable to find ${importEntryName}`);
      }
      const { css: importCss, preload: importPreload } = resolveEntrypoint(
        importFileInfos,
        bundle,
        config,
        false,
        false
      );
      for (const dependency of importCss) {
        if (css.indexOf(dependency) === -1) {
          css.push(dependency);
        }
      }
      for (const dependency of importPreload) {
        if (preload.indexOf(dependency) === -1) {
          preload.push(dependency);
        }
      }
    }
  }
  const filePath = `${config.base}${fileInfos.fileName}`;
  if (isCSSOrJsEntry) {
    if (fileInfos.isEntry) {
      js.push(filePath);
    } else {
      css.push(filePath);
    }
  } else if (preload.indexOf(filePath) === -1) {
    preload.push(filePath);
  }
  if (fileInfos.viteMetadata?.importedCss.size) {
    fileInfos.viteMetadata.importedCss.forEach((cssFilePath) => {
      css.push(`${config.base}${cssFilePath}`);
    });
  }
  return { js, css, preload, legacy: legacyEntryName };
};
var prepareRollupInputs = (config) => {
  const inputParsed = {};
  for (const [entryName, entryPath] of Object.entries(config.build.rollupOptions.input)) {
    const entryAbsolutePath = normalizePath((0, import_path2.resolve)((0, import_process.cwd)(), entryPath));
    if (entryAbsolutePath.indexOf(config.root) !== 0) {
      console.error("Entry points must be inside Vite root directory");
      process.exit(1);
    }
    const extension = (0, import_path2.extname)(entryPath);
    const entryType = [".css", ".scss", ".sass", ".less", ".styl", ".stylus", ".postcss"].indexOf(extension) !== -1 ? "css" : "js";
    const entryRelativePath = entryAbsolutePath.substring(config.root.length + 1);
    inputParsed[entryName] = {
      entryType,
      entryPath: entryRelativePath
    };
  }
  return inputParsed;
};

// src/pluginOptions.ts
var import_node_path3 = require("path");
function resolvePluginOptions(userConfig = {}) {
  if (typeof userConfig.publicDirectory === "string") {
    userConfig.publicDirectory = userConfig.publicDirectory.trim().replace(/^\/+/, "");
    if (userConfig.publicDirectory === "") {
      throw new Error("vite-plugin-symfony: publicDirectory must be a subdirectory. E.g. 'public'.");
    }
  }
  if (typeof userConfig.buildDirectory === "string") {
    userConfig.buildDirectory = userConfig.buildDirectory.trim().replace(/^\/+/, "").replace(/\/+$/, "");
    if (userConfig.buildDirectory === "") {
      throw new Error("vite-plugin-symfony: buildDirectory must be a subdirectory. E.g. 'build'.");
    }
  }
  if (userConfig.servePublic !== false) {
    userConfig.servePublic = true;
  }
  return {
    servePublic: userConfig.servePublic,
    publicDirectory: userConfig.publicDirectory ?? "public",
    buildDirectory: userConfig.buildDirectory ?? "build",
    refresh: userConfig.refresh ?? false,
    viteDevServerHostname: userConfig.viteDevServerHostname ?? null,
    verbose: userConfig.verbose === true
  };
}
function resolveBase(config) {
  return "/" + config.buildDirectory + "/";
}
function resolveOutDir(config) {
  return (0, import_node_path3.join)(config.publicDirectory, config.buildDirectory);
}

// src/index.ts
var import_node_url = require("url");
var FS_PREFIX = `/@fs/`;
var VALID_ID_PREFIX = `/@id/`;
var CLIENT_PUBLIC_PATH = `/@vite/client`;
var ENV_PUBLIC_PATH = `/@vite/env`;
var pluginDir = (0, import_node_path4.dirname)((0, import_node_path4.dirname)((0, import_node_url.fileURLToPath)(importMetaUrl)));
var importQueryRE = /(\?|&)import=?(?:&|$)/;
var internalPrefixes = [FS_PREFIX, VALID_ID_PREFIX, CLIENT_PUBLIC_PATH, ENV_PUBLIC_PATH];
var InternalPrefixRE = new RegExp(`^(?:${internalPrefixes.join("|")})`);
var isImportRequest = (url) => importQueryRE.test(url);
var isInternalRequest = (url) => InternalPrefixRE.test(url);
var refreshPaths = ["templates/**/*.twig"];
function resolveDevServerUrl(address, config, pluginOptions) {
  if (config.server?.origin) {
    return config.server.origin;
  }
  const configHmrProtocol = typeof config.server.hmr === "object" ? config.server.hmr.protocol : null;
  const clientProtocol = configHmrProtocol ? configHmrProtocol === "wss" ? "https" : "http" : null;
  const serverProtocol = config.server.https ? "https" : "http";
  const protocol = clientProtocol ?? serverProtocol;
  const configHmrHost = typeof config.server.hmr === "object" ? config.server.hmr.host : null;
  const configHost = typeof config.server.host === "string" ? config.server.host : null;
  const serverAddress = isIpv6(address) ? `[${address.address}]` : address.address;
  const host = configHmrHost ?? pluginOptions.viteDevServerHostname ?? configHost ?? serverAddress;
  const configHmrClientPort = typeof config.server.hmr === "object" ? config.server.hmr.clientPort : null;
  const port = configHmrClientPort ?? address.port;
  return `${protocol}://${host}:${port}`;
}
function symfony(userOptions = {}) {
  const pluginOptions = resolvePluginOptions(userOptions);
  let viteConfig;
  let viteDevServerUrl;
  const entryPointsFilename = "entrypoints.json";
  const entryPoints = {};
  let outputCount = 0;
  return {
    name: "symfony",
    enforce: "post",
    config(userConfig) {
      if (userConfig.build.rollupOptions.input instanceof Array) {
        console.error("rollupOptions.input must be an Objet like {app: './assets/app.js'}");
        process.exit(1);
      }
      const extraConfig = {
        base: userConfig.base ?? resolveBase(pluginOptions),
        publicDir: false,
        build: {
          manifest: true,
          outDir: userConfig.build?.outDir ?? resolveOutDir(pluginOptions)
        },
        optimizeDeps: {
          //Set to true to force dependency pre-bundling.
          force: true
        }
      };
      return extraConfig;
    },
    configResolved(config) {
      viteConfig = config;
    },
    configureServer(devServer) {
      const { watcher, ws } = devServer;
      devServer.httpServer?.once("listening", () => {
        if (viteConfig.env.DEV) {
          const buildDir = (0, import_node_path4.resolve)(viteConfig.root, viteConfig.build.outDir);
          if (!(0, import_node_fs.existsSync)(buildDir)) {
            (0, import_node_fs.mkdirSync)(buildDir, { recursive: true });
          }
          (0, import_node_fs.existsSync)(buildDir) && emptyDir(buildDir);
          const address = devServer.httpServer?.address();
          const isAddressInfo = (x) => typeof x === "object";
          if (!isAddressInfo(address)) {
            console.error("address is not an object open an issue with your address value to fix the problem", address);
            process.exit(1);
          }
          viteDevServerUrl = resolveDevServerUrl(address, devServer.config, pluginOptions);
          const entryPoints2 = getDevEntryPoints(viteConfig, viteDevServerUrl);
          const entryPointsPath = (0, import_node_path4.resolve)(viteConfig.root, viteConfig.build.outDir, entryPointsFilename);
          writeJson(entryPointsPath, {
            isProd: false,
            viteServer: {
              origin: viteDevServerUrl,
              base: viteConfig.base
            },
            entryPoints: entryPoints2,
            legacy: false
          });
        }
        if (pluginOptions.verbose) {
          setTimeout(() => {
            devServer.config.logger.info(`
${import_picocolors2.default.green("\u279C")}  Vite Config`);
            logConfig(viteConfig, devServer, 0);
            devServer.config.logger.info(`
${import_picocolors2.default.green("\u279C")}  End of config 
`);
          }, 100);
        }
      });
      if (pluginOptions.refresh !== false) {
        const paths = pluginOptions.refresh === true ? refreshPaths : pluginOptions.refresh;
        for (const path3 of paths) {
          watcher.add(path3);
        }
        watcher.on("change", function(path3) {
          if (path3.endsWith(".twig")) {
            ws.send({
              type: "full-reload"
            });
          }
        });
      }
      if (pluginOptions.servePublic) {
        const serve = (0, import_sirv.default)(pluginOptions.publicDirectory, {
          dev: true,
          etag: true,
          extensions: [],
          setHeaders(res, pathname) {
            if (/\.[tj]sx?$/.test(pathname)) {
              res.setHeader("Content-Type", "application/javascript");
            }
            res.setHeader("Access-Control-Allow-Origin", "*");
          }
        });
        devServer.middlewares.use(function viteServePublicMiddleware(req, res, next) {
          if (req.url === "/" || req.url === "/build/") {
            res.statusCode = 404;
            res.end((0, import_node_fs.readFileSync)((0, import_node_path4.join)(pluginDir, "static/dev-server-404.html")));
            return;
          }
          if (isImportRequest(req.url) || isInternalRequest(req.url)) {
            return next();
          }
          serve(req, res, next);
        });
      }
    },
    async renderChunk(code, chunk, opts) {
      if (!chunk.isEntry) {
        return;
      }
      const fileExt = chunk.facadeModuleId.split(".").pop();
      if (["css", "scss", "sass", "less", "styl", "stylus", "postcss"].indexOf(fileExt) === -1) {
        return;
      }
      const cssAssetName = chunk.facadeModuleId ? normalizePath((0, import_node_path4.relative)(viteConfig.root, chunk.facadeModuleId)) : chunk.name;
      chunk.viteMetadata.importedCss.forEach((cssBuildFilename) => {
        entryPath2exportPath[cssAssetName] = cssBuildFilename;
      });
    },
    generateBundle(options, bundle) {
      addBuildEntryPoints(options, viteConfig, bundle, entryPoints);
      outputCount++;
      const output = viteConfig.build.rollupOptions?.output;
      const outputLength = Array.isArray(output) ? output.length : 1;
      if (outputCount >= outputLength) {
        this.emitFile({
          fileName: entryPointsFilename,
          type: "asset",
          source: JSON.stringify(
            {
              isProd: true,
              viteServer: false,
              entryPoints,
              legacy: typeof entryPoints["polyfills-legacy"] !== "undefined"
            },
            null,
            2
          )
        });
      }
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
