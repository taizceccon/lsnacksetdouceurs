<!DOCTYPE html>
<html lang="fr">
<head>

  {% block meta %}
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">  
  <meta name="theme-color" content="#FEFCFA" media="(prefers-color-scheme: light)">
  <meta name="theme-color" content="#3A322F" media="(prefers-color-scheme: dark)">
  {% endblock %}

  <title>{% block title %}Douceurs & Snacks de Leila{% endblock %}</title>
  
  <link rel="icon" href="{{ asset('favicon.ico') }}" />
  
  <!-- Polices optimisées : Playfair Display (titres), Quicksand (texte) -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Quicksand:wght@400;500;600&display=swap" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-yT1b9J6Z+...etc" crossorigin="anonymous" referrerpolicy="no-referrer" />

  {# <script src="https://cdn.tailwindcss.com"></script>  #}  
  <!-- Tailwind optimisé (version buildée en local, pas le CDN) -->
  <link rel="stylesheet" href="{{ asset('build/app.css') }}">

  <script>    
    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  </script>

</head>
<body class="min-h-screen flex flex-col font-sans bg-creme text-gray-800 dark:bg-fondDark dark:text-texteClair transition-colors duration-300">
  <!-- Skip link pour accessibilité -->
  <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 focus:bg-white focus:text-black focus:p-2 focus:z-50">
      Aller directement au contenu principal
  </a>

  {% include 'header.html.twig' %}

  <!-- Flash messages -->
  {% for label, messages in app.flashes %}
    {% for message in messages %}
      <div class="bg-green-100 border border-green-300 text-green-800 px-4 py-2 rounded mb-4 text-sm">
        {{ message }}
      </div>
    {% endfor %}
  {% endfor %}

<!-- Main content -->
  <main id="main-content" class="flex-grow bg-white dark:bg-fondDark text-black dark:text-texteClair transition-colors duration-300">
      {% block body %}{% endblock %}
  </main>

 {% include 'footer.html.twig' %}
 
 {% block javascripts %}
  <script>  
    document.addEventListener('DOMContentLoaded', function () {
      // Mobile menu
    const burgerBtn = document.getElementById('burger-button');
    const mobileMenu = document.getElementById('mobile-menu');
    if (burgerBtn && mobileMenu) {
        burgerBtn.addEventListener('click', () => {
            const expanded = burgerBtn.getAttribute('aria-expanded') === 'true';
            burgerBtn.setAttribute('aria-expanded', !expanded);
            mobileMenu.classList.toggle('hidden');
        });
    }
      // Dark mode toggle 
      const themeToggleBtn = document.getElementById('theme-toggle');
      const themeIcon = document.getElementById('theme-icon');
      if (themeToggleBtn && themeIcon) {
        themeToggleBtn.addEventListener('click', () => {
          const html = document.documentElement;
          const isDark = html.classList.toggle('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
          themeToggleBtn.setAttribute('aria-pressed', isDark);
          themeIcon.textContent = isDark ? '☀️' : '🌙';
        });
      }
      // Update panier avec AJAX     
      document.querySelectorAll('form[action*="cart/update"]').forEach(form => {
        form.addEventListener('submit', function (e) {
          e.preventDefault();
          const input = form.querySelector('input[name="quantity"]');
          const quantity = input.value;
          const action = form.getAttribute('action');
          fetch(action, {
            method: 'POST',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({ quantity })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const row = form.closest('tr') || form.closest('.flex.flex-col');
              const subtotalCell = row?.querySelector('.js-subtotal');
              if (subtotalCell) {
                subtotalCell.textContent = `${data.subtotal} €`;
              }
              document.querySelectorAll('.js-cart-total').forEach(el => {
                el.textContent = `Total : ${data.total} €`;
              });
            } else {
              alert(data.message || 'Erreur lors de la mise à jour.');
            }
          })
          .catch(() => {
            alert('Une erreur est survenue.');
          });
        });
      });
           
  // compteur panier
  document.querySelectorAll('.add-to-cart-button').forEach(button => {
      button.addEventListener('click', async (e) => {
          e.preventDefault();

          const form = button.closest("form");
          if (!form) return;

          const response = await fetch(form.action, {
              method: "POST",
              body: new FormData(form),
              headers: { "X-Requested-With": "XMLHttpRequest" }
          });

          if (response.ok) {
              const data = await response.json();
              if (data.cartItemCount !== undefined) {
                  cartCountEl.textContent = data.cartItemCount;
                  cartCountEl.classList.remove("hidden");
              }
          }
      });
    });

    // mise à jour dans la page panier
    document.querySelectorAll('.update-cart-form').forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const response = await fetch(form.action, {
                method: "POST",
                body: new FormData(form)
            });
            if (response.ok) {
                const data = await response.json();
                if (data.cartItemCount !== undefined) {
                    cartCountEl.textContent = data.cartItemCount;
                    cartCountEl.classList.toggle('hidden', data.cartItemCount === 0);
                }
            }
        });
    });

    //suppression produit
    document.querySelectorAll('.remove-from-cart').forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            const response = await fetch(button.href, { method: "POST" });
            if (response.ok) {
                const data = await response.json();
                if (data.cartItemCount !== undefined) {
                    cartCountEl.textContent = data.cartItemCount;
                    cartCountEl.classList.toggle('hidden', data.cartItemCount === 0);
                }
            }
           });
        });
    });
  </script>
{% endblock %}

</body>
</html>